Python - 3
-----------

Dynamic langauge
----------------
data type is dynamic

programming languages
---------------------
int i;
i = 10		(static)


Scripting tools
---------------
i = 10		(dynamic)


i = "hello"


i = True

open source
-----------
source code is free of cost


python strength is ready made functions
---------------------------------------
1. array => reverse the array			=>	 C++ - 10		python - 3 lines max

 
desktop app			=>		tkinter

web app				=>		MVC, Rest API	- Django, Flask, pyramid...

Testing				=>		unit test, pytest, robo framework, selenium

Automation			=>		paramiko

Webscrapping		=>		beautiful soup

ETL					=>		Petl

data science		=>		Data Analytics, ML, AI


flavours of python 
------------------
1. Cpython			-	 currently using

2. Jython			-	 python code to java

3. Iron Python		-	 dot net libraries


Python
------

2.x - print "hello"
---------------

3.x - print("hello")



Editors
-------
1. Notepad++

2. pycharm Community Edition (opensource)

3. Visual Studio Code (CE)

4. Eclipse

5. sublimetext

6. IDLE		-	integrated development environment


python - www.python.org
-----------------------
3.10 latest version

1. python SDK - libraries necessary to execute the python code

2. shell (interactive env)

3. IDLE


Overloaded Operators
--------------------
+	=>		addition, concatenation

*	=>		multiplication, printing a string n number of times



Module = imp
method = reload


Python coding rules
-------------------

#!		-	shebang		- path python.exe

comments
--------
# for comments - single line comment


strings in python
-----------------
single line string

"this is a sample string"
'this is a sample string'

multiple line string
--------------------
"""
this is a sample string
this is a sample string
this is a sample string
this is a sample string
this is a sample string
"""

'''
this is a sample string
this is a sample string
this is a sample string
this is a sample string
this is a sample string
'''


multiple line comment
---------------------
""" """ or ''' '''


Indentation - tabs or spaces
----------------------------
loops

if conditions

functions

------------------------------------------------

def fun():
	print("this code belongs to function fun"
	
	for i in range(1, 25):
		print("this code belongs to for loop")
		

		if i % 3 == 0:
			print("this is if condition code")	
			print(i)

		
		print("this code belongs to for loop")
		

	print("this code belongs to function fun"

print("this is __main__ module code")

fun()

primitive data types
---------------------

1. Numbers
	a. integers
	b. float
	c. complex

2. Strings

3. Boolean

-------------------------------------------------------------------

binary values
-------------
binary value of 5 and 3


5 		0101
3		0011
		----
		0111		=> 7
		----	


5		0101
3		0011
		----
		0001		=>	1	
		----	


10100

10000
10100

0000 		=> 	1111		= -1
0101		=>		1010		= -6


Control structures and loops
-----------------------------

control structures
------------------
if conditions


loops
-----
1. for loop
2. while loop

print function
--------------
print(data, sep=, end="\n")


-----------------------------------------------------------------------

1 2 3 4 5
 1 2 3 4
  1 2 3
   1 2
    1
   2 1
  3 2 1 
 4 3 2 1
5 4 3 2 1



print all prime numbers between 150 and 50 and also print the count of prime numbers.


-----------------------------------------------------------------------

Strings
-------
strings are immutable

-------------------------------------------------------------------------------------------------------
                                        DAY - 02
-------------------------------------------------------------------------------------------------------
Data Structures
---------------
1. Lists
2. Dictionary
3. Tuples
4. Sets

Lists
-----
lists are same as arrays in other tech

array?
1. arrays are collection of homogenous data
2. memory allocation is contigious

1. lists are collection of hetrogenous data
2. memory allocation is not contigious
3. ordered collection
4. Subscriptable (indexed)
5. lists are enclosed in [..]

List Manipulation functions
---------------------------
'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'

Dictionary
----------
1. associative arrays
2. keys and values => {k1: v1, k2: v2, k3: v3...}
3. all keys in a dictionary is unique
4. dictionaries are unordered collection
5. all dictionaries are enclosed in  { }

Dictionary manipulation function
--------------------------------
'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values'

Tuples
------
immutable lists
t = ( )
count
index

set
---
1. sets are a colletion unique values
2. sets are unoredered collection
3. sets are not subscriptable
4. sets are mutable
5. sets are enclosed  { } no key values


Packages and Modules
---------------------

Packages - folders which contains modules

modules - libraries in other tech
python modules does not have any special extension (.py)

packages are compared with classes in OOPS

to create an object of a class we need a constructor =>  __init__()   (dunder init)

to access modules from a package we need to __init__.py file stored in it
__init__.py file can be empty


all modules has to be a part of sys.path

sys.path = [ ]

import mymodule
---------------
mymodule.py   =>   mymodule.pyc (bycode) -> will be stored in a folder __pycache__

root path

C:\Users\Kiran\AppData\Local\Programs\Python\Python39

create a file with an extension (.pth)
libpath.pth => C:/Delhi


Functions
---------






















 









   	




















